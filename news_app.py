# -*- coding: utf-8 -*-
"""news_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/121ZEpqKaPF_gld8fM-PiP7MRsM7-991o
"""

import streamlit as st
from serpapi import GoogleSearch
import google.generativeai as genai # Google Generative AI SDK 임포트
import json
import os

# --- API 키 로드 ---
# Streamlit Community Cloud에서는 'Secrets' 섹션에 키를 설정합니다.
# 로컬 개발 시에는 .streamlit/secrets.toml 파일에 저장합니다.
# 예시:
# SERPAPI_API_KEY = "YOUR_SERPAPI_API_KEY"
# GOOGLE_API_KEY = "YOUR_GOOGLE_API_KEY"
# GOOGLE_GEMINI_MODEL_NAME = "gemini-1.5-flash-latest" # 사용할 Gemini 모델 이름

try:
    SERPAPI_API_KEY = st.secrets["SERPAPI_API_KEY"]
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
    # Gemini 모델 이름도 secrets에 넣어 관리하면 유연성이 높아집니다.
    # gemini-1.5-flash-latest 또는 gemini-1.5-pro-latest 등을 사용할 수 있습니다.
    GOOGLE_GEMINI_MODEL_NAME = st.secrets.get("GOOGLE_GEMINI_MODEL_NAME", "gemini-1.5-flash-latest")

    genai.configure(api_key=GOOGLE_API_KEY)
except KeyError as e:
    st.error(f"⚠️ 오류: API 키가 설정되지 않았습니다. {e} 키를 Streamlit Secrets에 추가해주세요.")
    st.info("Streamlit Community Cloud에서는 'Settings -> Secrets'에서 API 키를 설정할 수 있습니다.")
    st.stop() # API 키가 없으면 앱 실행 중지

# --- SerpApi 뉴스 검색 함수 (이전과 동일) ---
@st.cache_data(ttl=3600) # 1시간 동안 캐시
def search_news_with_serpapi(query, num_results=5):
    try:
        params = {
            "api_key": SERPAPI_API_KEY,
            "engine": "google",
            "q": query,
            "tbm": "nws",  # 뉴스 검색
            "num": num_results,
            "hl": "ko", # 한국어 결과 선호
            "gl": "kr" # 한국 지역 선호
        }
        search = GoogleSearch(params)
        results = search.get_dict()
        news_results = []
        if "news_results" in results:
            for news in results["news_results"]:
                news_results.append({
                    "title": news.get("title"),
                    "link": news.get("link"),
                    "snippet": news.get("snippet"),
                    "source": news.get("source"),
                    "date": news.get("date")
                })
        return news_results
    except Exception as e:
        st.error(f"SerpApi 뉴스 검색 중 오류 발생: {e}")
        return []

# --- LLM을 활용한 요약 및 키워드 추출 함수 (Google Gemini 예시) ---
def summarize_and_extract_keywords(text):
    if not text:
        return "내용 없음", "내용 없음"

    try:
        # Gemini 모델 초기화
        model = genai.GenerativeModel(model_name=GOOGLE_GEMINI_MODEL_NAME)

        # 프롬프트 구성
        prompt = f"""다음 뉴스 기사를 요약하고 쉼표로 구분된 5-7개의 키워드를 추출해주세요.
응답은 반드시 다음 형식으로 해주세요: '요약: [요약 내용]\n키워드: [키워드1, 키워드2, ...]'

뉴스 기사:
{text}
"""

        # LLM 호출
        response = model.generate_content(
            prompt,
            generation_config=genai.types.GenerationConfig(
                temperature=0.7,
                max_output_tokens=500,
            )
        )

        # 응답에서 텍스트 추출 (response.text는 하나의 문자열을 반환)
        content = response.text

        # LLM 응답에서 요약과 키워드를 파싱
        summary = ""
        keywords = ""
        if "요약:" in content and "키워드:" in content:
            parts = content.split("키워드:")
            summary = parts[0].replace("요약:", "").strip()
            keywords = parts[1].strip()
        else: # 예상과 다른 형식의 응답인 경우 전체를 요약으로 간주
            summary = content
            keywords = "키워드 추출 실패 (형식 오류)"

        return summary, keywords
    except Exception as e:
        st.error(f"Gemini LLM 처리 중 오류 발생: {e}")
        return "요약 실패", "키워드 추출 실패"

# --- Streamlit 앱 UI (이전과 동일) ---
st.set_page_config(
    page_title="📰 AI 뉴스 브리퍼",
    layout="centered", # 모바일 화면에 가깝게 중앙 정렬
    initial_sidebar_state="collapsed", # 초기 사이드바 숨김
    menu_items={ # 햄버거 메뉴 커스터마이징
        'About': "이 앱은 SerpApi와 Google Gemini를 활용하여 뉴스 기사를 검색하고 요약합니다."
    }
)

# 모바일 화면처럼 보이도록 CSS 추가 (기본적인 반응형 디자인)
st.markdown(
    """
    <style>
    /* 기본 컨테이너 패딩 조정 */
    .stApp > header {
        background-color: transparent;
    }
    .stApp {
        margin: auto;
        max-width: 700px; /* 모바일처럼 폭 제한 */
        padding-top: 1rem;
        padding-right: 1rem;
        padding-left: 1rem;
        padding-bottom: 1rem;
    }
    .main .block-container {
        padding-top: 1rem;
        padding-right: 1rem;
        padding-left: 1rem;
        padding-bottom: 1rem;
    }

    /* 텍스트 입력창 스타일 */
    .stTextInput>div>div>input {
        font-size: 1.1rem;
        padding: 0.75rem 1rem;
        border-radius: 0.5rem;
        border: 1px solid #ccc;
    }
    .stTextInput>label {
        font-size: 1rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    /* 버튼 스타일 */
    .stButton>button {
        font-size: 1.1rem;
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        width: 100%;
        margin-top: 1rem;
        background-color: #4CAF50; /* 버튼 색상 */
        color: white;
        border: none;
        cursor: pointer;
    }
    .stButton>button:hover {
        background-color: #45a049;
    }

    /* 제목 및 부제목 스타일 */
    h1 {
        color: #2e8b57; /* 제목 색상 */
        text-align: center;
        margin-bottom: 0.5rem;
    }
    h3 {
        font-size: 1.3rem;
        margin-top: 1.5rem;
        margin-bottom: 0.5rem;
        color: #333;
    }

    /* Expander (뉴스 기사) 스타일 */
    .stExpander details {
        background-color: #f0f2f6;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 0.75rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .stExpander details summary {
        font-weight: bold;
        font-size: 1.1rem;
        color: #2e8b57; /* 요약 제목 색상 */
        cursor: pointer;
    }
    .stExpander div {
        padding-top: 0.5rem;
        padding-left: 0.5rem;
        padding-right: 0.5rem;
    }
    .stExpander div p {
        font-size: 0.95rem;
        line-height: 1.6;
        color: #555;
    }

    /* 링크 스타일 */
    a {
        color: #1a73e8;
        text-decoration: none;
        word-break: break-all; /* 긴 URL이 넘치지 않도록 */
    }
    a:hover {
        text-decoration: underline;
    }

    /* 구분선 스타일 */
    hr {
        border-top: 1px solid #eee;
        margin: 1.5rem 0;
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.title("📰 AI 뉴스 브리퍼")
st.markdown("관심 있는 키워드로 최신 뉴스 기사를 검색하고, LLM이 요약 및 키워드를 추출해 드립니다.")

search_query = st.text_input("검색할 뉴스 키워드를 입력하세요 (예: 인공지능, 전기차, 기후 변화)", key="search_input")

if st.button("뉴스 검색 및 요약 시작"):
    if search_query:
        with st.spinner("⏳ 뉴스 기사 검색 중... 잠시만 기다려 주세요."):
            news_articles = search_news_with_serpapi(search_query)

        if news_articles:
            st.subheader(f"✨ '{search_query}' 관련 최신 뉴스 기사")
            for i, article in enumerate(news_articles):
                with st.expander(f"**{i+1}. {article.get('title', '제목 없음')}**"):
                    st.write(f"**출처:** {article.get('source', '알 수 없음')} | **날짜:** {article.get('date', '알 수 없음')}")
                    st.markdown(f"**링크:** [뉴스 원문 바로가기]({article.get('link', '#')})")
                    st.markdown(f"**_원문 미리보기:_**\n{article.get('snippet', '미리보기를 불러올 수 없습니다. SerpApi에서 스니펫을 제공하지 않았을 수 있습니다.')}")

                    if article.get('snippet'):
                        with st.spinner("🧠 Gemini LLM으로 요약 및 키워드 추출 중..."):
                            summary, keywords = summarize_and_extract_keywords(article['snippet'])
                        st.markdown("---")
                        st.markdown(f"**📝 요약:**\n{summary}")
                        st.markdown(f"**🏷️ 키워드:** {keywords}")
                    else:
                        st.warning("요약할 내용이 없어 LLM을 실행하지 않습니다.")
                st.markdown("---") # 각 기사 사이에 구분선

        else:
            st.warning("😓 검색 결과가 없습니다. 다른 키워드로 시도해 보세요.")
    else:
        st.warning("👉 검색 키워드를 입력해주세요.")

st.sidebar.header("앱 정보")
st.sidebar.info(
    "이 앱은 [SerpApi](https://serpapi.com/)를 사용하여 뉴스 기사를 검색하고, "
    "[Google Gemini API](https://ai.google.dev/)를 사용하여 기사를 요약하고 키워드를 추출합니다."
)
st.sidebar.markdown("Made with ❤️ by Your Name") # 당신의 이름 또는 팀명
st.sidebar.markdown("[GitHub 저장소 (예시)](https://github.com/your-username/your-repo-name)") # 필요 시 GitHub 링크 추가